#include<stdio.h>
#include<unistd.h>
#include<errno.h>
#include<sys/types.h>
#include<pwd.h>
#include<string.h>
#include<stdlib.h>
#include<signal.h>
#include<fcntl.h>

void call_cd(char* arg)
{
  if(chdir(arg) == -1)
    perror("Error ");
}

void call_pwd()
{
  char* cwd;

  if(getcwd(cwd,100*sizeof(cwd)) == NULL)
    perror("Error ");
  else
    printf("%s\n",cwd);
}

void call_echo(char** argv)
{
  int a,b;
  int eEflag=-1;
  int nflag = 0;
  char output[1000] = {{'\0'}};

  for(b=1;argv[b] && argv[b][0]=='-' ;b++)
    {
      if(argv[b] && argv[b][0]=='-')
  	{
  	  for(a=0;argv[b][a] && argv[b][a] != ' ';a++)
  	    {
  	      if(argv[b][a] == 'n')
  		{
  		  nflag = 1;
  		}

  	      /* if(argv[b][a] == 'e') */
  	      /* 	{ */
  	      /* 	  eEflag = 1; */
  	      /* 	} */
  	      /* else if(argv[b][a] == 'E') */
  	      /* 	{ */
  	      /* 	  eEflag = -1; */
  	      /* 	} */
  	    }
  	}
    }

  for(a=b;argv[a];a++)
    {
      strcat(output,argv[a]);
      strcat(output," ");
    }
  output[strlen(output)-1] = '\0';

   /* if(eEflag == 1) */
  /*   { */
  /*   } */

  if(nflag == 1)
    {
      printf("%s",output);
      fflush(stdout);
    }
  else
    printf("%s\n",output);

}

void check_home(char pwd[],int len)
{
  char temp[1000];
  temp[0] = '~';
  int a=len;
  int b=1;
  while(pwd[a]) 
    { 
      temp[b] = pwd[a];
      b++; 
      a++; 
    }
  temp[b] = '\0';
  strcpy(pwd,temp);
}

char* input_command(char hpath[],int len)
{
  size_t buffer_size=1000;
  int val;
  char host[100];
  char pwd[1005];
  char *command=NULL;

  struct passwd *user = getpwuid(getuid());
  gethostname(host,sizeof(host));
  if(getcwd(pwd,sizeof(pwd))==NULL)
    perror("error : path not found");

  //printf("hpath is %s\n",hpath);
  //printf("pwd is %s\n",pwd);
  
  if(strncmp(pwd,hpath,len) == 0)
    {
      check_home(pwd,len);
    }

  printf("<%s@%s:%s-->",user->pw_name,host,pwd);
  fflush(stdout);

  val=getdelim(&command,&buffer_size,'\n',stdin);
  command[val-1] = '\0';

  return command;
}

char** split_command(char *command,char* delim)
{
  int a=0;
  char *part = strtok(command,delim);
  char **argv = malloc(100 * sizeof(char*));

  while(part != NULL)
    {
      argv[a] = part;
      a++;
      part = strtok(NULL,delim);
    }
  argv[a] = NULL;

  return argv;
}

int check_background(char** argv)
{
  int a;
  for(a=0;argv[a];a++)
    {}
  return a;
}

void handler(int sig)
{
  pid_t pid;

  pid = wait(NULL);

  printf("Pid %d exited.\n", pid);
}

int launch_command(char** argv,int bground)
{
  pid_t pid;
  
  pid = fork();
  
  if(pid==0)
    {
      if(bground == 1)
	setpgid(0,0);
      //printf("%d  %d\n",getpgid(0),pid);
      
      if(execvp(argv[0],argv) == -1)
	perror("Error : command not executed");
      exit(0);
    }
  else if(pid<0)
    {
      perror("Error : Fork not created");
    }
  else
    {
      if(bground == 1)
	tcsetpgrp(0,getpgrp());
      else
	wait();
      //printf("waited\n");
    }
      //printf("%d  %d\n",getpgid(pid),pid);
    
  return 1;
}

int check_redirection(char** argv)
{
  int a;
  for(a=0;argv[a];a++)
    {
      if(argv[a] == '>')
	return a;
    }
  return 0;
}

void redirect(char** argv,int flag)
{
  pid_t pid;
  
  pid = fork();
  
  if(pid==0)
    {
      int f = open(argv[a+1], O_RDONLY | O_WRONLY | O_CREAT, S_IRWXU);
      dup2(f,1);
      if(execvp(argv[0],argv) == -1)
	perror("Error : command not executed");
      close(f);
      exit(0);
    }
  else if(pid<0)
    {
      perror("Error : Fork not created");
    }
  else
    {
      wait();
    }
}

void quit()
{
  _exit(0);
}

int main()
{
  char *com = NULL;
  char **argv;
  char **multicom;
  int a,bg=0;
  char HOME[1000];
  int homelen,lastele;
  int redir_flag;
  
  signal(SIGCHLD, handler);
  
  if(getcwd(HOME,sizeof(HOME))==NULL)
    perror("error : path not found");
  homelen=strlen(HOME);

  while(1)
    {
      //printf("HOME is %s\n",HOME);
      //printf("%d\n",getpgid(getpid()));
      com = input_command(HOME,homelen);
      multicom = split_command(com,";\t");
      
      for(a=0;multicom[a];a++)
	{
	  com = multicom[a];
	  argv = split_command(com," \t");
	  bg=0;
	  lastele = check_background(argv)-1;

	  //redir_flag=check_redirection(argv);
	  if(strcmp(argv[lastele],"&") == 0)
	    {
	      bg=1;
	      argv[lastele] = NULL;
	    }

	  if(strcmp(argv[0],"cd") == 0)
	    {
	      call_cd(argv[1]);
	    }
	  else if(strcmp(argv[0],"pwd") == 0)
	    {
	      call_pwd();
	    }
	  else if(strcmp(argv[0],"echo") == 0)
	    {
	      call_echo(argv);
	    }
	  else if(strcmp(argv[0],"quit") == 0)
	    {
	      quit();
	    }
	  else if(bg==1)
	    {
	      if (launch_command(argv,bg) != 1)
		perror("Bg Error ");
	    }
	  else if(redir_flag == 1)
	    {
	      if(redirect(argv,redir_flag) != 1)
	  	perror("Redir Error ");
	    }
	      
	}
    }

  return 0;
}
